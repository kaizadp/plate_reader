Tool = 1
) %>%
dplyr::select(Rack.x, Source, Rack.y, Destination, Volume, Tool, file)
# rename the "rack" columns.
# do this using base R, because dplyr doesn't like two columns with the same name
names(data_calc)[names(data_calc) == "Rack.x"] = "Rack",
names(data_calc)[names(data_calc) == "Rack.y"] = "Rack"
)
plan = drake_plan(
# 1. import data files
FILEPATH = "data/date1-data/",
filePaths <- list.files(path = FILEPATH,pattern = "*.xlsx", full.names = TRUE),
raw = target(process_directory(FILEPATH),
trigger = trigger(change = list.files(FILEPATH, pattern = "xlsx$", recursive = TRUE))),
data <- do.call(rbind, lapply(filePaths, function(path) {
df <- read_excel(path)
df[["file"]] <- rep(path, nrow(df))
df})),
# data = sapply(list.files(path = FILEPATH,pattern = "*.xlsx", full.names = TRUE),
#               read_excel, simplify = FALSE) %>% bind_rows()
# if importing only single file, use this instead:
# data = read_excel("data/FILE-NAME.xlsx")
# melt/gather the dataset
data_melt  =
data %>%
rename(letter = `...1`) %>%
reshape2::melt(id = c("letter", "file"),
variable.name = "num",
value.name = "val") %>%
#  tidyr::gather(num, val, 2:13) %>%
#  rename(letter = `...1`) %>%
dplyr::mutate(Source = paste0(letter, num),
file = str_replace_all(file, paste0(FILEPATH,"/"),""),
file = str_replace_all(file, ".xlsx","")),
# 2. import calibration files
CC_FILEPATH = "data/date1-cc/",
calib = sapply(list.files(path = CC_FILEPATH,pattern = "*.xlsx", full.names = TRUE),
read_excel, simplify = FALSE) %>% bind_rows(),
# clean the calib file and perform standard curve calculations
calib_2 =
calib %>%
tidyr::gather(rep, val, 2:3) %>%
# calculate mean
group_by(conc) %>%
dplyr::summarise(mean = mean(val)) %>%
# do standard curve, y = mx+b
na.omit() %>%
ungroup %>%
dplyr::mutate(slope = lm(conc ~ mean)$coefficients["mean"],
intercept = lm(conc ~ mean)$coefficients["(Intercept)"]),
SLOPE = mean(calib_2$slope),
INTERCEPT = mean(calib_2$intercept),
# 3. calculate concentrations using the standard curve
data_calc =
data_melt %>%
dplyr::mutate(conc_ng_uL = (SLOPE * val)+ INTERCEPT,
conc_ng_uL = round(conc_ng_uL,4)) %>%
# calculate normalization volume
dplyr::mutate(norm_uL = 240/conc_ng_uL,
norm_uL = round(norm_uL,0)) %>%
# select only the relevant columns
dplyr::select(Source, file, norm_uL) %>%
rename(Volume = norm_uL) %>%
# add other columns
dplyr::mutate(
Rack.x = 1,
Rack.y = 1,
Destination = "A1",
Tool = 1
) %>%
dplyr::select(Rack.x, Source, Rack.y, Destination, Volume, Tool, file)
# rename the "rack" columns.
# do this using base R, because dplyr doesn't like two columns with the same name
names(data_calc)[names(data_calc) == "Rack.x"] == "Rack",
names(data_calc)[names(data_calc) == "Rack.y"] == "Rack"
)
plan = drake_plan(
# 1. import data files
FILEPATH = "data/date1-data/",
filePaths <- list.files(path = FILEPATH,pattern = "*.xlsx", full.names = TRUE),
raw = target(process_directory(FILEPATH),
trigger = trigger(change = list.files(FILEPATH, pattern = "xlsx$", recursive = TRUE))),
data <- do.call(rbind, lapply(filePaths, function(path) {
df <- read_excel(path)
df[["file"]] <- rep(path, nrow(df))
df})),
# data = sapply(list.files(path = FILEPATH,pattern = "*.xlsx", full.names = TRUE),
#               read_excel, simplify = FALSE) %>% bind_rows()
# if importing only single file, use this instead:
# data = read_excel("data/FILE-NAME.xlsx")
# melt/gather the dataset
data_melt  =
data %>%
rename(letter = `...1`) %>%
reshape2::melt(id = c("letter", "file"),
variable.name = "num",
value.name = "val") %>%
#  tidyr::gather(num, val, 2:13) %>%
#  rename(letter = `...1`) %>%
dplyr::mutate(Source = paste0(letter, num),
file = str_replace_all(file, paste0(FILEPATH,"/"),""),
file = str_replace_all(file, ".xlsx","")),
# 2. import calibration files
CC_FILEPATH = "data/date1-cc/",
calib = sapply(list.files(path = CC_FILEPATH,pattern = "*.xlsx", full.names = TRUE),
read_excel, simplify = FALSE) %>% bind_rows(),
# clean the calib file and perform standard curve calculations
calib_2 =
calib %>%
tidyr::gather(rep, val, 2:3) %>%
# calculate mean
group_by(conc) %>%
dplyr::summarise(mean = mean(val)) %>%
# do standard curve, y = mx+b
na.omit() %>%
ungroup %>%
dplyr::mutate(slope = lm(conc ~ mean)$coefficients["mean"],
intercept = lm(conc ~ mean)$coefficients["(Intercept)"]),
SLOPE = mean(calib_2$slope),
INTERCEPT = mean(calib_2$intercept),
# 3. calculate concentrations using the standard curve
data_calc =
data_melt %>%
dplyr::mutate(conc_ng_uL = (SLOPE * val)+ INTERCEPT,
conc_ng_uL = round(conc_ng_uL,4)) %>%
# calculate normalization volume
dplyr::mutate(norm_uL = 240/conc_ng_uL,
norm_uL = round(norm_uL,0)) %>%
# select only the relevant columns
dplyr::select(Source, file, norm_uL) %>%
rename(Volume = norm_uL) %>%
# add other columns
dplyr::mutate(
Rack.x = 1,
Rack.y = 1,
Destination = "A1",
Tool = 1
) %>%
dplyr::select(Rack.x, Source, Rack.y, Destination, Volume, Tool, file)
# rename the "rack" columns.
# do this using base R, because dplyr doesn't like two columns with the same name
names(data_calc)[names(data_calc) == "Rack.x"] == "Rack",
names(data_calc)[names(data_calc) == "Rack.y"] == "Rack"
)
plan = drake_plan(
# 1. import data files
FILEPATH = "data/date1-data/",
filePaths <- list.files(path = FILEPATH,pattern = "*.xlsx", full.names = TRUE),
raw = target(process_directory(FILEPATH),
trigger = trigger(change = list.files(FILEPATH, pattern = "xlsx$", recursive = TRUE))),
data <- do.call(rbind, lapply(filePaths, function(path) {
df <- read_excel(path)
df[["file"]] <- rep(path, nrow(df))
df})),
# data = sapply(list.files(path = FILEPATH,pattern = "*.xlsx", full.names = TRUE),
#               read_excel, simplify = FALSE) %>% bind_rows()
# if importing only single file, use this instead:
# data = read_excel("data/FILE-NAME.xlsx")
# melt/gather the dataset
data_melt  =
data %>%
rename(letter = `...1`) %>%
reshape2::melt(id = c("letter", "file"),
variable.name = "num",
value.name = "val") %>%
#  tidyr::gather(num, val, 2:13) %>%
#  rename(letter = `...1`) %>%
dplyr::mutate(Source = paste0(letter, num),
file = str_replace_all(file, paste0(FILEPATH,"/"),""),
file = str_replace_all(file, ".xlsx","")),
# 2. import calibration files
CC_FILEPATH = "data/date1-cc/",
calib = sapply(list.files(path = CC_FILEPATH,pattern = "*.xlsx", full.names = TRUE),
read_excel, simplify = FALSE) %>% bind_rows(),
# clean the calib file and perform standard curve calculations
calib_2 =
calib %>%
tidyr::gather(rep, val, 2:3) %>%
# calculate mean
group_by(conc) %>%
dplyr::summarise(mean = mean(val)) %>%
# do standard curve, y = mx+b
na.omit() %>%
ungroup %>%
dplyr::mutate(slope = lm(conc ~ mean)$coefficients["mean"],
intercept = lm(conc ~ mean)$coefficients["(Intercept)"]),
SLOPE = mean(calib_2$slope),
INTERCEPT = mean(calib_2$intercept)
)
readd(raw)
list.files(FILEPATH, pattern = "xlsx$", recursive = TRUE))
list.files(FILEPATH, pattern = "xlsx$", recursive = TRUE)
change = list.files(FILEPATH, pattern = "xlsx$", recursive = TRUE))
# 1. import data files
FILEPATH = "data/date1-data/"
# 1. import data files
FILEPATH = "data/date1-data/"
library(readxl)
library(readr)
library(dplyr)
library(stringr)
library(drake)
# 1. import data files
FILEPATH = "data/date1-data/"
filePaths <- list.files(path = FILEPATH,pattern = "*.xlsx", full.names = TRUE)
data <- do.call(rbind, lapply(filePaths, function(path) {
df <- read_excel(path)
df[["file"]] <- rep(path, nrow(df))
df}))
data_melt  =
data %>%
rename(letter = `...1`) %>%
reshape2::melt(id = c("letter", "file"),
variable.name = "num",
value.name = "val") %>%
#  tidyr::gather(num, val, 2:13) %>%
#  rename(letter = `...1`) %>%
dplyr::mutate(Source = paste0(letter, num),
file = str_replace_all(file, paste0(FILEPATH,"/"),""),
file = str_replace_all(file, ".xlsx",""))
# 2. import calibration files
CC_FILEPATH = "data/date1-cc/"
CC_FILEPATH = "data/date1-cc/"
cc_filePaths <- list.files(path = CC_FILEPATH,pattern = "*.xlsx", full.names = TRUE)
cc_data <- do.call(rbind, lapply(cc_filePaths, function(path) {
df <- read_excel(path)
df[["file"]] <- rep(path, nrow(df))
df}))
View(cc_data)
View(cc_data)
calib_2 =
cc_data %>%
dplyr::mutate(file = str_replace_all(file, paste0(FILEPATH,"/"),""),
file = str_replace_all(file, ".xlsx","")) %>%
tidyr::gather(rep, val, rep1:rep2)
View(calib_2)
calib_2 =
cc_data %>%
dplyr::mutate(file = str_replace_all(file, paste0(FILEPATH,"/"),""),
file = str_replace_all(file, ".xlsx","")) %>%
tidyr::gather(rep, val, rep1:rep2) %>%
# calculate mean
group_by(file, conc) %>%
dplyr::summarise(mean = mean(val))
# clean the calib file and perform standard curve calculations
calib_2 =
cc_data %>%
dplyr::mutate(file = str_replace_all(file, paste0(FILEPATH,"/"),""),
file = str_replace_all(file, ".xlsx","")) %>%
tidyr::gather(rep, val, rep1:rep2) %>%
# calculate mean
group_by(file, conc) %>%
dplyr::summarise(mean = mean(val)) %>%
# do standard curve, y = mx+b
na.omit() %>%
ungroup %>%
dplyr::summarise(slope = lm(conc ~ mean)$coefficients["mean"],
intercept = lm(conc ~ mean)$coefficients["(Intercept)"])
# clean the calib file and perform standard curve calculations
calib_2 =
cc_data %>%
dplyr::mutate(file = str_replace_all(file, paste0(FILEPATH,"/"),""),
file = str_replace_all(file, ".xlsx","")) %>%
tidyr::gather(rep, val, rep1:rep2) %>%
# calculate mean
group_by(file, conc) %>%
dplyr::summarise(mean = mean(val)) %>%
# do standard curve, y = mx+b
na.omit() %>%
ungroup %>%
group_by(file) %>%
dplyr::summarise(slope = lm(conc ~ mean)$coefficients["mean"],
intercept = lm(conc ~ mean)$coefficients["(Intercept)"])
# clean the calib file and perform standard curve calculations
calib_2 =
cc_data %>%
dplyr::mutate(file = str_replace_all(file, paste0(CC_FILEPATH,"/"),""),
file = str_replace_all(file, ".xlsx","")) %>%
tidyr::gather(rep, val, rep1:rep2) %>%
# calculate mean
group_by(file, conc) %>%
dplyr::summarise(mean = mean(val)) %>%
# do standard curve, y = mx+b
na.omit() %>%
ungroup %>%
group_by(file) %>%
dplyr::summarise(slope = lm(conc ~ mean)$coefficients["mean"],
intercept = lm(conc ~ mean)$coefficients["(Intercept)"])
CC_FILEPATH
cc_filePaths
# clean the calib file and perform standard curve calculations
calib_2 =
cc_data %>%
dplyr::mutate(file = str_replace_all(file, paste0(CC_FILEPATH,"/"),""),
file = str_replace_all(file, "-cc.xlsx","")) %>%
tidyr::gather(rep, val, rep1:rep2) %>%
# calculate mean
group_by(file, conc) %>%
dplyr::summarise(mean = mean(val)) %>%
# do standard curve, y = mx+b
na.omit() %>%
ungroup %>%
group_by(file) %>%
dplyr::summarise(slope = lm(conc ~ mean)$coefficients["mean"],
intercept = lm(conc ~ mean)$coefficients["(Intercept)"])
data_calc =
data_melt %>%
left_join(calib2, by = "file")
data_calc =
data_melt %>%
left_join(calib_2, by = "file")
calib_2 =
cc_data %>%
dplyr::mutate(file = str_replace_all(file, paste0(CC_FILEPATH,"/"),""),
file = str_replace_all(file, "-cc.xlsx","")) %>%
tidyr::gather(rep, val, rep1:rep2) %>%
# calculate mean
group_by(file, conc) %>%
dplyr::summarise(mean = mean(val)) %>%
# do standard curve, y = mx+b
na.omit() %>%
ungroup
# clean the calib file and perform standard curve calculations
calib_2 =
cc_data %>%
dplyr::mutate(file = str_replace_all(file, paste0(CC_FILEPATH,"/"),""),
file = str_replace_all(file, "-cc.xlsx","")) %>%
tidyr::gather(rep, val, rep1:rep2) %>%
# calculate mean
group_by(file, conc) %>%
dplyr::summarise(mean = mean(val)) %>%
# do standard curve, y = mx+b
na.omit() %>%
ungroup %>%
group_by(file) %>%
dplyr::summarise(slope = lm(conc ~ mean)$coefficients["mean"],
intercept = lm(conc ~ mean)$coefficients["(Intercept)"])
data_calc =
data_melt %>%
left_join(calib_2, by = "file") %>%
#  dplyr::mutate(conc_ng_uL = (SLOPE * val)+ INTERCEPT,
#                conc_ng_uL = round(conc_ng_uL,4)) %>%
# calculate normalization volume
dplyr::mutate(norm_uL = 240/conc_ng_uL,
norm_uL = round(norm_uL,0)) %>%
# select only the relevant columns
dplyr::select(Source, file, norm_uL) %>%
rename(Volume = norm_uL) %>%
# add other columns
dplyr::mutate(
Rack.x = 1,
Rack.y = 1,
Destination = "A1",
Tool = 1
) %>%
dplyr::select(Rack.x, Source, Rack.y, Destination, Volume, Tool, file)
data_calc =
data_melt %>%
ungroup %>%
left_join(calib_2, by = "file") %>%
dplyr::mutate(conc_ng_uL = (slope * val)+ intercept,
conc_ng_uL = round(conc_ng_uL,4)) %>%
# calculate normalization volume
dplyr::mutate(norm_uL = 240/conc_ng_uL,
norm_uL = round(norm_uL,0)) %>%
# select only the relevant columns
dplyr::select(Source, file, norm_uL) %>%
rename(Volume = norm_uL) %>%
# add other columns
dplyr::mutate(
Rack.x = 1,
Rack.y = 1,
Destination = "A1",
Tool = 1
) %>%
dplyr::select(Rack.x, Source, Rack.y, Destination, Volume, Tool, file)
# rename the "rack" columns.
# do this using base R, because dplyr doesn't like two columns with the same name
names(data_calc)[names(data_calc) == "Rack.x"] = "Rack"
names(data_calc)[names(data_calc) == "Rack.y"] = "Rack"
save_files <- function(data, group) {
write.csv(data, file = file.path("processed", paste0(group$file, ".csv")), row.names = F)
}
data_calc %>%
group_by(file) %>%
group_walk(save_files)
export = data_calc %>%
group_by(file) %>%
group_walk(save_files)
# 1. import data files
FILEPATH = "data/date1-data/"
filePaths <- list.files(path = FILEPATH,pattern = "*.xlsx", full.names = TRUE)
data <- do.call(rbind, lapply(filePaths, function(path) {
df <- read_excel(path)
df[["file"]] <- rep(path, nrow(df))
df}))
CC_FILEPATH = "data/date1-cc/"
cc_filePaths <- list.files(path = CC_FILEPATH,pattern = "*.xlsx", full.names = TRUE)
cc_data <- do.call(rbind, lapply(cc_filePaths, function(path) {
df <- read_excel(path)
df[["file"]] <- rep(path, nrow(df))
df}))
CC_FILEPATH = "data/date1-cc/"
cc_filePaths <- list.files(path = CC_FILEPATH,pattern = "*.xlsx", full.names = TRUE)
cc_data <- do.call(rbind, lapply(cc_filePaths, function(path) {
df <- read_excel(path)
df[["file"]] <- rep(path, nrow(df))
df}))
#
# 4. clean the calib file and perform standard curve calculations ----
calibration =
cc_data %>%
dplyr::mutate(file = str_replace_all(file, paste0(CC_FILEPATH,"/"),""),
file = str_replace_all(file, "-cc.xlsx","")) %>%
tidyr::gather(rep, val, rep1:rep2) %>%
# calculate mean
group_by(file, conc) %>%
dplyr::summarise(mean = mean(val)) %>%
# do standard curve, y = mx+b
na.omit() %>%
ungroup %>%
group_by(file) %>%
dplyr::summarise(slope = lm(conc ~ mean)$coefficients["mean"],
intercept = lm(conc ~ mean)$coefficients["(Intercept)"])
source('~/OneDrive - PNNL/Documents/GitHub/Sarah/plate_reader/plate_reader.R', echo=TRUE)
PROCESSEDPATH = "processed/"
processedPaths <- list.files(path = PROCESSEDPATH,pattern = "*.xlsx", full.names = TRUE)
# list all xlsx files in the target directory, and then read and collate them
FILEPATH = "data/date1-data/"
filePaths <- list.files(path = FILEPATH,pattern = "*.xlsx", full.names = TRUE)
filePaths
setdiff(filePaths, processedPaths)
processedPaths
PROCESSEDPATH = "processed/"
processedPaths <- list.files(path = PROCESSEDPATH,pattern = "*.xlsx", full.names = TRUE)
processedPaths
PROCESSEDPATH = "processed/"
processedPaths <- list.files(path = PROCESSEDPATH,pattern = "*.xlsx", full.names = TRUE)
processedPaths <- list.files(path = PROCESSEDPATH,pattern = "*.csv", full.names = TRUE)
setdiff(filePaths, processedPaths)
file_strremove = str_remove_all(filePaths, FILEPATH)
file_strremove = str_remove_all(filePaths, paste(FILEPATH,"/"))
file_strremove = str_remove_all(filePaths, paste0(FILEPATH,"/"))
processed_strremove = str_remove_all(processedPaths, paste0(PROCESSEDPATH,"/"))
file_strremove = str_remove_all(filePaths, paste0(FILEPATH,"/")) %>%  str_remove_all(filePaths, ".xlsx")
file_strremove = str_remove_all(filePaths, paste0(FILEPATH,"/")) %>%  str_remove_all(".xlsx")
processed_strremove = str_remove_all(processedPaths, paste0(PROCESSEDPATH,"/"))%>%  str_remove_all(".csv")
setdiff(file_strremove, processed_strremove)
new_files = setdiff(file_strremove, processed_strremove)
new_files = setdiff(file_strremove, processed_strremove) %>% paste0(FILEPATH,"/",.)
new_files = setdiff(file_strremove, processed_strremove) %>% paste0(FILEPATH,"/",.,".xlsx")
newdata <- do.call(rbind, lapply(new_files, function(path) {
df <- read_excel(path)
df[["file"]] <- rep(path, nrow(df))
df}))
data_melt  =
newdata %>%
rename(letter = `...1`) %>%
reshape2::melt(id = c("letter", "file"),
variable.name = "num",
value.name = "val") %>%
# clean the `file` column. remove unnecessary strings of text
dplyr::mutate(Source = paste0(letter, num),
file = str_replace_all(file, paste0(FILEPATH,"/"),""),
file = str_replace_all(file, ".xlsx",""))
CC_FILEPATH = "data/date1-cc/"
CC_FILEPATH = "data/date1-cc/"
cc_filePaths <- list.files(path = CC_FILEPATH,pattern = "*.xlsx", full.names = TRUE)
View(newdata)
newdata <- do.call(rbind, lapply(new_files, function(path) {
df <- read_excel(path)
df[["file"]] <- rep(path, nrow(df))
df}))
data_melt  =
newdata %>%
rename(letter = `...1`) %>%
reshape2::melt(id = c("letter", "file"),
variable.name = "num",
value.name = "val") %>%
# clean the `file` column. remove unnecessary strings of text
dplyr::mutate(Source = paste0(letter, num),
file = str_replace_all(file, paste0(FILEPATH,"/"),""),
file = str_replace_all(file, ".xlsx",""))
View(data_melt)
# list all xlsx files in the target directory, and then read and collate them
FILEPATH = "data/date1-data/"
filePaths <- list.files(path = FILEPATH,pattern = "*.xlsx", full.names = TRUE)
PROCESSEDPATH = "processed/"
PROCESSEDPATH = "processed/"
processedPaths <- list.files(path = PROCESSEDPATH,pattern = "*.csv", full.names = TRUE)
# identify only the new files
# do this by comparing the files in the data folder and the files in the processed folder, and see which are new
# first, remove unnecessary strings from data files and processed files, so we can compare
files_removestr = str_remove_all(filePaths, paste0(FILEPATH,"/")) %>%  str_remove_all(".xlsx")
processed_removestr = str_remove_all(processedPaths, paste0(PROCESSEDPATH,"/"))%>%  str_remove_all(".csv")
# then compare
new_files = setdiff(files_removestr, processed_removestr) %>% paste0(FILEPATH,"/",.,".xlsx")
# now run the code on the new data
newdata <- do.call(rbind, lapply(new_files, function(path) {
df <- read_excel(path)
df[["file"]] <- rep(path, nrow(df))
df}))
data_melt  =
newdata %>%
rename(letter = `...1`) %>%
reshape2::melt(id = c("letter", "file"),
variable.name = "num",
value.name = "val") %>%
# clean the `file` column. remove unnecessary strings of text
dplyr::mutate(Source = paste0(letter, num),
file = str_replace_all(file, paste0(FILEPATH,"/"),""),
file = str_replace_all(file, ".xlsx",""))
