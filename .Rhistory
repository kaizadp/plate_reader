library(readxl)
library(readr)
library(readxl)
library(readr)
library(dplyr)
data = sapply(list.files(path = FILEPATH,pattern = "*.xlsx", full.names = TRUE),
read_excel, simplify = FALSE) %>% bind_rows()
# 1. import data files
FILEPATH = "data/date1-data/"
data = sapply(list.files(path = FILEPATH,pattern = "*.xlsx", full.names = TRUE),
read_excel, simplify = FALSE) %>% bind_rows()
View(data)
# remove the top
data_clean = data[-1:41,]
# remove the top
data_clean = data[-c(1:41),]
View(data_clean)
# 1. import data files
FILEPATH = "data/date1-data/"
data = sapply(list.files(path = FILEPATH,pattern = "*.xlsx", full.names = TRUE),
read_excel, simplify = FALSE) %>% bind_rows()
View(data)
data_melt = melt_csv(data)
data_melt = melt(data)
data_melt = tidyr::melt(data)
data_melt = plyr::melt(data)
??melt
data_melt = gather(data)
data_melt = plyr::gather(data)
??gather
data_melt = tidyr::gather(data)
View(data_melt)
data_melt = tidyr::gather(data, id = 1)
data_melt = tidyr::gather(data, num, val, 2:13)
data %>%
tidyr:gather(num, val, 2:13)
data %>%
tidyr::gather(num, val, 2:13)
data_melt  =
data %>%
tidyr::gather(num, val, 2:13)
names(data_melt)
data_melt  =
data %>%
tidyr::gather(num, val, 2:13) %>%
rename(letter = `...1`)
data_melt  =
data %>%
tidyr::gather(num, val, 2:13) %>%
rename(letter = `...1`) %>%
dplyr::mutate(Source = paste(letter, num))
data_melt  =
data %>%
tidyr::gather(num, val, 2:13) %>%
rename(letter = `...1`) %>%
dplyr::mutate(Source = paste0(letter, num))
# 2. import calibration files
CC_FILEPATH = "data/date1-cc/"
data = sapply(list.files(path = CC_FILEPATH,pattern = "*.xlsx", full.names = TRUE),
read_excel, simplify = FALSE) %>% bind_rows()
calib = sapply(list.files(path = CC_FILEPATH,pattern = "*.xlsx", full.names = TRUE),
read_excel, simplify = FALSE) %>% bind_rows()
data = sapply(list.files(path = FILEPATH,pattern = "*.xlsx", full.names = TRUE),
read_excel, simplify = FALSE) %>% bind_rows()
View(calib)
calib = sapply(list.files(path = CC_FILEPATH,pattern = "*.xlsx", full.names = TRUE),
read_excel, simplify = FALSE) %>% bind_rows()
calib_2 =
calib %>%
tidyr::gather(rep, val, 2:3)
View(calib_2)
calib_2 =
calib %>%
tidyr::gather(rep, val, 2:3) %>%
group_by(conc) %>%
dplyr::summarise(mean = mean(val))
calib_2 =
calib %>%
tidyr::gather(rep, val, 2:3) %>%
# calculate mean
group_by(conc) %>%
dplyr::summarise(mean = mean(val)) %>%
# do standard curve, y = mx+b
dplyr::mutate(slope = lm(conc ~ mean)$coefficients["Mean"],
intercept = lm(conc ~ mean)$coefficients["Intercept"])
calib_2 =
calib %>%
tidyr::gather(rep, val, 2:3) %>%
# calculate mean
group_by(conc) %>%
dplyr::summarise(mean = mean(val)) %>%
# do standard curve, y = mx+b
na.omit() %>%
dplyr::mutate(slope = lm(conc ~ mean)$coefficients["Mean"],
intercept = lm(conc ~ mean)$coefficients["Intercept"])
calib_2 =
calib %>%
tidyr::gather(rep, val, 2:3) %>%
# calculate mean
group_by(conc) %>%
dplyr::summarise(mean = mean(val)) %>%
# do standard curve, y = mx+b
na.omit() %>%
ungroup %>%
dplyr::mutate(slope = lm(conc ~ mean)$coefficients["Mean"],
intercept = lm(conc ~ mean)$coefficients["Intercept"])
lm(conc~mean, data = calib_2)
l = lm(conc~mean, data = calib_2)
l$coefficients
calib_2 =
calib %>%
tidyr::gather(rep, val, 2:3) %>%
# calculate mean
group_by(conc) %>%
dplyr::summarise(mean = mean(val)) %>%
# do standard curve, y = mx+b
na.omit() %>%
ungroup %>%
dplyr::mutate(slope = lm(conc ~ mean)$coefficients["mean"],
intercept = lm(conc ~ mean)$coefficients["Intercept"])
l = lm(conc~mean, data = calib_2)
l$coefficients
calib_2 =
calib %>%
tidyr::gather(rep, val, 2:3) %>%
# calculate mean
group_by(conc) %>%
dplyr::summarise(mean = mean(val)) %>%
# do standard curve, y = mx+b
na.omit() %>%
ungroup %>%
dplyr::mutate(slope = lm(conc ~ mean)$coefficients["mean"],
intercept = lm(conc ~ mean)$coefficients["(Intercept)"])
l = lm(conc~mean, data = calib_2)
l
l$coefficients
l$coefficients["mean"]
# call the coefficients
l$coefficients
# extract the indiv coeffs
l$coefficients["mean"]
l$coefficients["(Intercept)"]
# clean the calib file and perform standard curve calculations
calib_2 =
calib %>%
tidyr::gather(rep, val, 2:3) %>%
# calculate mean
group_by(conc) %>%
dplyr::summarise(mean = mean(val)) %>%
# do standard curve, y = mx+b
na.omit() %>%
ungroup %>%
dplyr::mutate(slope = lm(conc ~ mean)$coefficients["mean"],
intercept = lm(conc ~ mean)$coefficients["(Intercept)"])
SLOPE = mean(calib_2$slope)
INTERCEPT = mean(calib_2$intercept)
data_calc =
data_melt %>%
dplyr::mutate(conc = (SLOPE * val)+ INTERCEPT)
View(data_calc)
data_calc =
data_melt %>%
dplyr::mutate(conc = (SLOPE * val)+ INTERCEPT,
conc = round(conc,4))
data_calc =
data_melt %>%
dplyr::mutate(conc_ng_uL = (SLOPE * val)+ INTERCEPT,
conc_ng_uL = round(conc_ng_uL,4))
data_norm =
data_calc %>%
dplyr::mutate(norm_uL = 240/conc_ng_uL)
View(data_norm)
data_calc =
data_melt %>%
dplyr::mutate(conc_ng_uL = (SLOPE * val)+ INTERCEPT,
conc_ng_uL = round(conc_ng_uL,4)) %>%
# calculate normalization volume
dplyr::mutate(norm_uL = 240/conc_ng_uL)
data_calc =
data_melt %>%
dplyr::mutate(conc_ng_uL = (SLOPE * val)+ INTERCEPT,
conc_ng_uL = round(conc_ng_uL,4)) %>%
# calculate normalization volume
dplyr::mutate(norm_uL = 240/conc_ng_uL,
round(norm_uL = norm_uL,1))
data_calc =
data_melt %>%
dplyr::mutate(conc_ng_uL = (SLOPE * val)+ INTERCEPT,
conc_ng_uL = round(conc_ng_uL,4)) %>%
# calculate normalization volume
dplyr::mutate(norm_uL = 240/conc_ng_uL,
norm_uL = round(norm_uL,1))
data_calc =
data_melt %>%
dplyr::mutate(conc_ng_uL = (SLOPE * val)+ INTERCEPT,
conc_ng_uL = round(conc_ng_uL,4)) %>%
# calculate normalization volume
dplyr::mutate(norm_uL = 240/conc_ng_uL,
norm_uL = round(norm_uL,1)) %>%
# select only the relevant columns
dplyr::select(Source, norm_uL)
data_calc =
data_melt %>%
dplyr::mutate(conc_ng_uL = (SLOPE * val)+ INTERCEPT,
conc_ng_uL = round(conc_ng_uL,4)) %>%
# calculate normalization volume
dplyr::mutate(norm_uL = 240/conc_ng_uL,
norm_uL = round(norm_uL,1)) %>%
# select only the relevant columns
dplyr::select(Source, norm_uL) %>%
rename(Volume = norm_uL)
data_calc =
data_melt %>%
dplyr::mutate(conc_ng_uL = (SLOPE * val)+ INTERCEPT,
conc_ng_uL = round(conc_ng_uL,4)) %>%
# calculate normalization volume
dplyr::mutate(norm_uL = 240/conc_ng_uL,
norm_uL = round(norm_uL,1)) %>%
# select only the relevant columns
dplyr::select(Source, norm_uL) %>%
rename(Volume = norm_uL) %>%
# add other columns
dplyr::mutate(
Tool = 1
)
data_calc =
data_melt %>%
dplyr::mutate(conc_ng_uL = (SLOPE * val)+ INTERCEPT,
conc_ng_uL = round(conc_ng_uL,4)) %>%
# calculate normalization volume
dplyr::mutate(norm_uL = 240/conc_ng_uL,
norm_uL = round(norm_uL,1)) %>%
# select only the relevant columns
dplyr::select(Source, norm_uL) %>%
rename(Volume = norm_uL) %>%
# add other columns
dplyr::mutate(
Rack.x = 1,
Rack.y = 1,
Destination = "A1",
Tool = 1
)
data_calc =
data_melt %>%
dplyr::mutate(conc_ng_uL = (SLOPE * val)+ INTERCEPT,
conc_ng_uL = round(conc_ng_uL,4)) %>%
# calculate normalization volume
dplyr::mutate(norm_uL = 240/conc_ng_uL,
norm_uL = round(norm_uL,1)) %>%
# select only the relevant columns
dplyr::select(Source, norm_uL) %>%
rename(Volume = norm_uL) %>%
# add other columns
dplyr::mutate(
Rack.x = 1,
Rack.y = 1,
Destination = "A1",
Tool = 1
) %>%
dplyr::select(Rack.x, Source, Rack.y, Destination, Volume, Tool)
data_calc =
data_melt %>%
dplyr::mutate(conc_ng_uL = (SLOPE * val)+ INTERCEPT,
conc_ng_uL = round(conc_ng_uL,4)) %>%
# calculate normalization volume
dplyr::mutate(norm_uL = 240/conc_ng_uL,
norm_uL = round(norm_uL,1)) %>%
# select only the relevant columns
dplyr::select(Source, norm_uL) %>%
rename(Volume = norm_uL) %>%
# add other columns
dplyr::mutate(
Rack.x = 1,
Rack.y = 1,
Destination = "A1",
Tool = 1
) %>%
dplyr::select(Rack.x, Source, Rack.y, Destination, Volume, Tool) %>%
rename(Rack = Rack.x,
Rack = Rack.y)
data_calc =
data_melt %>%
dplyr::mutate(conc_ng_uL = (SLOPE * val)+ INTERCEPT,
conc_ng_uL = round(conc_ng_uL,4)) %>%
# calculate normalization volume
dplyr::mutate(norm_uL = 240/conc_ng_uL,
norm_uL = round(norm_uL,0)) %>%
# select only the relevant columns
dplyr::select(Source, norm_uL) %>%
rename(Volume = norm_uL) %>%
# add other columns
dplyr::mutate(
Rack.x = 1,
Rack.y = 1,
Destination = "A1",
Tool = 1
) %>%
dplyr::select(Rack.x, Source, Rack.y, Destination, Volume, Tool) %>%
rename(Rack = Rack.x,
Rack = Rack.y)
# 3. EXPORT
write.csv(data_calc, "processed/processed_data.csv")
# 3. EXPORT
write.csv(data_calc, "processed/processed_data.csv", row.names = FALSE)
